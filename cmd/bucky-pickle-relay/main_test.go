package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"testing"
)

func readfile(s string) ([]byte, error) {
	f, err := os.Open(s)
	if err != nil {
		return nil, err
	}

	blob, err := ioutil.ReadAll(f)
	f.Close()
	return blob, err
}

func TestUnMarshal(t *testing.T) {
	/* test command moded to ./testing/data/gentests.py */
	/* you need to pre-generate test files in testing/data first */
	testDatadir := "../../testing/data"
	testfiles, err := ioutil.ReadDir(testDatadir)
	if err != nil {
		t.Fatal(err)
	}

	testcases := 0
	for _, file := range testfiles {
		if !strings.HasSuffix(file.Name(), ".pickle") {
			continue
		}

		testcases++
		base := file.Name()[:len(file.Name())-7]
		t.Logf("Testing %s", base)
		pickle, err := readfile(fmt.Sprintf("%s/%s.pickle", testDatadir, base))
		if err != nil {
			t.Error(err)
			continue
		}
		blob, err := readfile(fmt.Sprintf("%s/%s.line", testDatadir, base))
		if err != nil {
			t.Error(err)
			continue
		}
		lines := strings.Split(string(blob), "\n")
		for i := 0; i < len(lines); {
			if strings.TrimSpace(lines[i]) == "" {
				// delete element, preserve order
				lines = append(lines[:i], lines[i+1:]...)
			} else {
				i++
			}
		}

		// Actually run our code
		decode := decodePickle(pickle)

		// Validation
		for i, s := range lines {
			if i >= len(decode) {
				t.Errorf("Data point not decoded: %s", s)
				continue
			} else {
				t.Logf("Decoded: %s", decode[i])
			}
			if strings.TrimSpace(s) != decode[i] {
				t.Errorf("Graphite line strings don't match:  %s != %s",
					s, strings.TrimSpace(lines[i]))
			}
		}
		os.Remove(fmt.Sprintf("%s.pickle", base))
		os.Remove(fmt.Sprintf("%s.line", base))
	}

	if testcases == 0 {
		t.Fatal("No testcases generated by testing/data/gentests.py")
	}
}
